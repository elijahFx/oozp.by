const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É deploy –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const deployDir = path.join(__dirname, '..', 'deploy');
if (!fs.existsSync(deployDir)) {
  fs.mkdirSync(deployDir, { recursive: true });
}

// –§–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const filesToCopy = [
  'package.json',
  'package-lock.json',
  'next.config.js',
  'tailwind.config.ts',
  'tsconfig.json',
  'postcss.config.js',
  'components.json',
  '.eslintrc.json',
  'ecosystem.config.js',
  '.htaccess'
];

// –ü–∞–ø–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
const dirsToCopy = [
  '.next',
  'public',
  'app',
  'components',
  'lib',
  'hooks',
  'api'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function copyFile(src, dest) {
  try {
    fs.copyFileSync(src, dest);
    console.log(`‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${path.basename(src)}`);
  } catch (error) {
    console.error(`‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${src}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
function copyDir(src, dest) {
  try {
    if (!fs.existsSync(dest)) {
      fs.mkdirSync(dest, { recursive: true });
    }
    
    const items = fs.readdirSync(src);
    items.forEach(item => {
      const srcPath = path.join(src, item);
      const destPath = path.join(dest, item);
      
      if (fs.statSync(srcPath).isDirectory()) {
        copyDir(srcPath, destPath);
      } else {
        copyFile(srcPath, destPath);
      }
    });
    console.log(`‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: ${path.basename(src)}`);
  } catch (error) {
    console.error(`‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ ${src}:`, error.message);
  }
}

console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è...\n');

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
filesToCopy.forEach(file => {
  const srcPath = path.join(__dirname, '..', file);
  const destPath = path.join(deployDir, file);
  
  if (fs.existsSync(srcPath)) {
    copyFile(srcPath, destPath);
  } else {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
  }
});

console.log('');

// –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
dirsToCopy.forEach(dir => {
  const srcPath = path.join(__dirname, '..', dir);
  const destPath = path.join(deployDir, dir);
  
  if (fs.existsSync(srcPath)) {
    copyDir(srcPath, destPath);
  } else {
    console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${dir}`);
  }
});

console.log('\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log(`üìÅ –§–∞–π–ª—ã –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: ${deployDir}`);
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ deploy –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä');
console.log('2. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install --production');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start');
console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–º. DEPLOY_INSTRUCTIONS.md)');
